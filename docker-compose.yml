version: '3.9'

services:
  traefik:
    image: traefik:v3.0
    environment:
      # Traefik API
      - TRAEFIK_API=true # enables the Traefik API. True by default
      - TRAEFIK_API_INSECURE=false # disables access to the Traefik API over an insecure connection (HTTP).
      - TRAEFIK_API_DASHBOARD=true # enables the Traefik dashboard. True by default
      # Logging configuration
      - TRAEFIK_LOG_LEVEL=DEBUG # sets the log level to debug to debug
      - TRAEFIK_ACCESSLOG_FILTERS_STATUSCODES=400-499,500-599 # filters access logs to only include 400 and 500 level errors
      # Provider configuration
      - TRAEFIK_PROVIDERS_DOCKER=true # enables the Docker provider
      - TRAEFIK_PROVIDERS_DOCKER_WATCH=true # tells Traefik to listen to Docker events
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false # prevents Traefik from creating routes for containers that don't have a traefik.enable=true label
      # Entrypoints configuration
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80 # sets the port for HTTP
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443 # sets the port for HTTPS
      # Certificates configuration
      - TRAEFIK_CERTIFICATESRESOLVERS_MYRESOLVER_ACME_DNSCHALLENGE=true
      - TRAEFIK_CERTIFICATESRESOLVERS_MYRESOLVER_ACME_DNSCHALLENGE_PROVIDER:${PROVIDER}
      - TRAEFIK_CERTIFICATESRESOLVERS_MYRESOLVER_ACME_DNSCHALLENGE_DELAYBEFORECHECK=0 # Sets the time to wait before checking the DNS c>
      - TRAEFIK_CERTIFICATESRESOLVERS_MYRESOLVER_ACME_EMAIL:${EMAIL} # Email address used for registration
      - TRAEFIK_CERTIFICATESRESOLVERS_MYRESOLVER_ACME_STORAGE:${ACME_STORAGE} # Stores the Let's Encrypt certificate locally
      # Digital Ocean configuration
      - DO_AUTH_TOKEN:${DO_AUTH_TOKEN} # Digital Ocean API Token

    ports: # Expose ports 80 and 443
      - "80:80"
      - "443:443"
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /traefik/acme:/etc/traefik/acme # Copies the Let's Encrypt certificate locally for ease of backing up
    labels:
      # Traefik configuration
      - "traefik.enable=true" # enables Traefik for this container
      # Routers configuration
        # RedirectScheme http Router traefik
      - "traefik.http.routers.traefik.rule=Host(`${TRAFIK_DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.middlewares=test-redirectscheme" # applies the test-redirectscheme middleware to the traefik route
        # Https Router traefik-secure
      - "traefik.http.routers.traefik-secure.rule=Host(`${TRAFIK_DOMAIN}`)" # sets the rule for the Traefik dashboard route
      - "traefik.http.routers.traefik-secure.entrypoints=websecure" # sets the entrypoint for the Traefik dashboard route
      - "traefik.http.routers.traefik-secure.tls.certresolver=myresolver" # sets the certificate resolver for the Traefik dashboard route
      - "traefik.http.routers.traefik-secure.service=api@internal"
      - "traefik.http.routers.traefik-secure.middlewares=auth" # sets the middleware for the Traefik dashboard route
      # Services
      - "traefik.http.services.traefik-secure.loadbalancer.server.port=8080" # sets the port for the Traefik dashboard route
      # Middleware configuration (echo $(htpasswd -nb admin admin123))
      - "traefik.http.middlewares.auth.basicauth.users=${DASHBOARD_AUTH}" # sets the user and password for the basic authentication process
      - "traefik.http.middlewares.auth.basicauth.realm=Restricted Area" # sets the authentication realm for the basic authentication pr>
      # Redirect Scheme HTTP -> HTTPS
      - "traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https" # sets the scheme to redirect to (https)
      - "traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true" # sets the redirection to permanent


  catapp:
    image: mikesir87/cats:1.0
    labels:
      # Traefik configuration
      - "traefik.enable=true" # enables Traefik for this container
      # Routers configuration
        # RedirectScheme http Router catapp
      - "traefik.http.routers.catapp.rule=Host(`catapp.joergoertel.dk`)"
      - "traefik.http.routers.catapp.entrypoints=web"
      - "traefik.http.routers.catapp.middlewares=test-redirectscheme" # applies the test-redirectscheme middleware to the catapp route
        # Https Router catapp-secure
      - "traefik.http.routers.catapp-secure.rule=Host(`catapp.joergoertel.dk`)"
      - "traefik.http.routers.catapp-secure.entrypoints=websecure"
      - "traefik.http.routers.catapp-secure.service=catapp" #  This line associates the router with the "catapp" service. This means that any requests that match the rules for this router will be forwarded to the "catapp" service.
      - "traefik.http.routers.catapp-secure.tls.certresolver=myresolver" # see below
      - "traefik.http.routers.catapp-secure.middlewares=test-compress, test-errorpages, test-ratelimit" # applies the test-compress, test-errorpages, and test-ratelimit middlewares to the catapp route
      # Services configuration
      - "traefik.http.services.catapp-secure.loadbalancer.server.port=5000" # sets the port for the catapp service
      # Compress Middleware
      - "traefik.http.middlewares.test-compress.compress=true" # enables gzip compression
      # Error Pages Middleware
      - "traefik.http.middlewares.test-errorpages.errors.status=400-599"
      - "traefik.http.middlewares.test-errorpages.errors.service=error"
      - "traefik.http.middlewares.test-errorpages.errors.query=/{status}.html"
      # Rate Limit Middleware
      - "traefik.http.middlewares.test-ratelimit.ratelimit.average=100" # sets the average number of requests (seconds is the default unit)
      - "traefik.http.middlewares.test-ratelimit.ratelimit.period=1m" # sets the period of time for the average number of requests. Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h"
      - "traefik.http.middlewares.test-ratelimit.ratelimit.burst=50" # burst rate is the additional capacity it can handle for short, unexpected surges in requests.
      # Redirect Scheme HTTP -> HTTPS
      - "traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https" # sets the scheme to redirect to (https)
      - "traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true"


  # Error Page service
  error:
    image: guillaumebriday/traefik-custom-error-pages
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.error.rule=Host(`error.localhost`)"
      - "traefik.http.routers.error.service=error"
      - "traefik.http.services.error.loadbalancer.server.port=80"
      - "traefik.http.routers.error.entrypoints=web"

#  "traefik.http.routers.catapp.tls.certresolver=myresolver": This line enables TLS (Transport Layer Security, for encrypted connections)
#  for this router and specifies the certResolver to use when generating or retrieving TLS certificates for this router. This resolver could be
#  connected to a service like Let's Encrypt to automatically request and renew certificates as needed.
